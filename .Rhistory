?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
suma(flips2)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5, lambda = 100)
rpois(5, 100)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
require(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
require(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirL()
swirl()
swirl()
require(swilr)
require(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran,  size > 100500, r_os == "linux_gnu")
filter(cran,  size > 100500 & r_os == "linux_gnu")
filter(cran,  size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu") == filter(cran, size > 100500, r_os == "linux-gnu")
'filter(cran, size > 100500, r_os == "linux_gnu")' == 'filter(cran, size > 100500, r_os == "linux-gnu")'
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), desc(ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ef9e58ed1f3250c65c1ff73dd8eb215d2fc88a20")
oauth_endpoints("github")
myapp <- oauth_app("github", "bce6a89ed34bf733e264")
myapp <- oauth_app("github", "85a6e617a70feb9be88e67be64f684eba4395d51")
myapp <- oauth_app("getdata013", "85a6e617a70feb9be88e67be64f684eba4395d51")
myapp <- oauth_app("bce6a89ed34bf733e264", "85a6e617a70feb9be88e67be64f684eba4395d51")
myapp <- oauth_app("bce6a89ed34bf733e264")
myapp <- oauth_app("github", "bce6a89ed34bf733e264")
?oauth_app
myapp <- oauth_app("getdata013", "bce6a89ed34bf733e264")
myapp <- oauth_app("getdata013", "bce6a89ed34bf733e264", "85a6e617a70feb9be88e67be64f684eba4395d51")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
names(req)
req[[1]]
req[[2]]
req[[3]]
req[[4]]
req[[5]]
req[[6]]
req[[7]]
req[[8]]
req[[9]]
req[[10]]
req
a <- content(req)
names(a)
str(a)
a[[1]]
a[["datasharing"]]
a$name
a$name
for(i in length(a)) {a[[i]]$name}
for(i in length(a)) {print(a[[i]]$name)}
names(a)
namea(a)
name(a)
str(a)
str(a[[1]])
head(a)
head(a)
head(a[[1]])
a[[1]][[1]]
names(a[[1]])
a[[1]]$name
a[[2]]$name
for(i in length(a)) {print a[[i]]$name}
length(a)
a[[2]]$name
for(i in length(a)) {print(a[[i]]$name)}
for(i in 1:length(a)) {print(a[[i]]$name)}
a[[5]]
names(a[[5]])
url <- http://biostat.jhsph.edu/~jleek/contact.html
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
require(XML)
urlContent <- htmlTreeParse(url, useInternalNodes = T)
urlContent
length(urlContent)
library(httr); html2 = GET(url)
content2 = content(html2, as = "text") # this extracts the content
parsedHtml = htmlParse(content2, asText = T)
length(pardedHtml)
length(parsedHtml)
parsedHtml
htmlCode <- readLines(url)
nchar(htmlCode[1])
nchar(htmlCode[c(10, 20, 30, 100)])
q5data <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
q5url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
q5data <- readLines(q5url)
1258*26
names(a[[2]]
)
install.packages("gtools")
require(gtools)
help(package = "gtools")
combinations(3, 2, letters[1:3])
combinations(77, 4)
?combinations
combinations(5, 2)
combinations(6, 3, letters[1:6])
combinations(6, 4, letters[1:6])
combinations(6, 5, letters[1:6])
?permutations
permutations(5, 2)
factorial(5)
data(iris)
colnames(iris)
str(iris)
filter(iris, Species == "virginica") %>% summarize(Sepal = mean(Sepal.Length))
require(dplyr)
filter(iris, Species == "virginica") %>% summarize(Sepal = mean(Sepal.Length))
str(iris)
applt(iris[,1:4], 2, mean)
apply(iris[,1:4], 2, mean)
data(mtcars)
str(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(hp, cyl, mean))
hp <- with(mtcars, tapply(hp, cyl, mean))
str(hp)
hp
hp[1]-hp[3]
debug(ls)
ls
ls()
# data, model and bps could be lists with named df's in between
# data, model and bps could be lists with named df's in between
# Variable Names Required:
# Data: Year, Month, Day, Weekend, HDD, NonFT, FT
sdout <- function(data, model, type="NonFT", bps=bps, forecastYear = "x2016BP", ...) {
# use this if model is list?: forecastYear = names(model[1])
# data = df with columns HDD, weekend, month, NonFT, FT
# potentially add capability for string of HDD values and weekend, month passed separately
# model as model parameters in 12 x 13 df
# type = NonFT, FT, or DuPont
# bps as 12 x 3 df (months x Month, FT, NonFT) DuPont, Fords for old?
# actual bps should be a number between 0 and 4
# month as integer 1:12
# NB the BP numbers in
# variables ---------------------------------------------------------------
if(class(data)=="list") {
currData <- data[[forecastYear]]
} else {
if(class(data)=="data.frame") {
currData <- data
} else {
stop("data variable is not a list or data frame")
}
}
# below yields a df
if(class(model)=="list") {
currModel <- model[[forecastYear]][[type]]
} else {
if(class(model)=="data.frame") {
currModel <- model
} else {
stop("model variable is not a list or data frame")
}
}
# below yields a vector of length 12
if(class(bps)=="list") {
currbps <- bps[[forecastYear]][,type]
} else {
if(class(bps)=="data.frame") {
currbps <- bps[,type]
} else {
stop("bps variable is not a list or data frame")
}
}
#hdd <- data$HDD
#month <- data$Month
#weekend <- data$Weekend
#actual <- data[type]
# checks ------------------------------------------------------------------
stopifnot(is.numeric(currData$HDD))
stopifnot(nrow(currModel)==12)
# ncol(params) this one might differ for old data
stopifnot(nrow(currbps)==12)
stopifnot(is.element(tolower(c("month", "weekend")), tolower(colnames(currData))))
# notes -------------------------------------------------------------------
# at this point should have 2 data frames (data, model[12, x])
# bps should be a numeric vector length 12
# model columns could vary with breakpoints
# bps columns could vary by sendout models (NonFT, FT, Dupont, FordKTP, etc)
# 2016BP just NonFT and FT
# function ----------------------------------------------------------------
# this needs work (difference between counting of bps I think)
# dfbps <- apply(matrix(c(currbps[currData$Month], apply(currData$HDD>currModel[currData$Month, (ncol(currModel)-((ncol(currModel)-3)/2-1)):ncol(currModel)], 1, sum, na.rm = T)-1), ncol = 2), 1, min)
dfbps <- apply(matrix(c(currbps[currData$Month], apply(currData$HDD>currModel[currData$Month, (ncol(currModel)-((ncol(currModel)-3)/2-2)):ncol(currModel)], 1, sum, na.rm = T)), ncol = 2), 1, min)
# should be a using currData and dfbps which should have same nrow
stopifnot(nrow(currData)==length(dfbps))
f <- vector()
for(i in 1:nrow(currData)) {
if(currData$Weekend[i]==1) {
f[i] <- currModel[currData$Month[i], 3]
} else {
f[i] <- currModel[currData$Month[i], 2]
}
}
f[is.na(f)] <- 0
# test stuff
#mybp <- bps[month,type]
#currData[1,"HDD"]
#dfbps[1]
#currModel[currData[1,"Month"],]
# first bp works:
v <- currData$HDD*currModel[currData$Month, 4]
for(i in 1:nrow(currData)) {
for(j in 1:dfbps[i]) {
v[i] <- v[i] + ((currData$HDD[i]-currModel[currData[i,"Month"],j+9])*currModel[currData[i,"Month"],j+4])
}
}
v[is.na(v)] <- 0
f + v
}
# pairwise coeff & bp c(5, 10), c(6, 11), c(7, 12), c(8, 13)
require(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
colnames(students3)
reset()
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
packageVersion('dplyr')
install.packages("bind_rows")
install.packages("dplyr")
install.packages("dplyr")
swirl()
require(swirl)
swirl()
bind_rows(passed, failed)
sat
?contains
require(dplyr)
require(tidyr)
?contains
?select
?separate
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
DT2
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- hm(now())
this_moment <- hms(now())
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
install.packages("diagrammeR")
install.packages("DiagrammeR")
require(DiagrammeR)
help(package = "DiagrammeR")
examples("DiagrammeR")
example("DiagrammeR")
DiagrammeR("
sequenceDiagram;
customer->>ticket seller: ask ticket;
ticket seller->>database: seats;
alt tickets available
database->>ticket seller: ok;
ticket seller->>customer: confirm;
customer->>ticket seller: ok;
ticket seller->>database: book a seat;
ticket seller->>printer: print ticket;
else sold out
database->>ticket seller: none left;
ticket seller->>customer:  sorry;
end
")
DiagrammeR("
graph LR
A-->B
A-->C
C-->E
B-->D
C-->D
D-->F
E-->F
")
DiagrammeR("
graph TB
A-->B
A-->C
C-->E
B-->D
C-->D
D-->F
E-->F
")
setwd("/Volumes/RMS/Data Science/Coursera")
dir()
setwd("Exploratory_Data_Analysis")
dir()
setw("ExData_Plotting1")
setwd("ExData_Plotting1")
dri()
dir()
dir("../")
mybytes <- 1500000*120*8
mybytes
mybytes/2^20
bytes_per_MB <- 2^20
mybytes/bytes_per_MB
myMB <- mybytes/bytes_per_MB
(2075259*9*8)/2^20
(2075259*9*8)/2^20
Sys.env()
Sys.envir()
Sys.enviro()
memory.size()
Sys.info()
??Sys
Sye.getenv()
Sya.getenv()
Sys.getenv()
?gc
gcinfo()
gcinfo(FALS)
gcinfo(FALSE)
gcinfo(TRUE)
gcinfo(verbose = T)
gc()
memory.profile()
?read.table
inFile <- "../household_power_consumption.txt"
myData <- read.table(file = inFile)
gc(verbose = F)
myData[1,]
myData <- read.table(file = inFile, sep = ";")
head(myData)
